(                        <12/ 2/87>140)                                         \ LOAD FIRST TIME                                                               APPENDIX CREATE A2MARK                  MAIN     CREATE  2MARK                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          APPENDIX CREATE A3MARK                  MAIN     CREATE  3MARK                                                                                                                                                                                          TO  LOGO                REVECTOR MYDISKERR INTO DISKERR                                                                                                                                                                                                                                 ' <ABORT> CFA ' BRK-RETN !                                                        145 149 THRU \ compiler words           150 189 THRU \ routine source           190 199 THRU \ @FILE 2@FILE                                           ( AUTOBOOT               <12/ 2/87>143)                                                                                                                         REVECTOR START INTO START-SYS           REVECTOR START INTO BRK-RETN            REVECTOR EXIT IN( LOADBLOCK              <10/26/86>141)                                         \ load scr 140 first time through                                               APPENDIX FORGET A2MARK CREATE A2MARK    MAIN     FORGET  2MARK CREATE  2MARK                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( FAH  )                                                                           270 274 THRU \ SWAP-BSM                                                       APPENDIX FORGET A3MARK CREATE A3MARK    MAIN                                                                                                                                                                                                                                                                                                                                                                                                                                                              200 209 THRU \ primitives               210 223 THRU \ run card words           230 245 THRU \ BBALL                    224     LOAD \ MENU-HI LEVEL                                                                                                          141 142 THRU                                                                                                                                                                                    ( LOADBLOCK 2            <10/28/86>142)                                         \ this section loads the runtime code                                           APPENDIX FORGET A3MARK CREATE A3MARK    MAIN     FORGET  3MARK CREATE  3MARK                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( FAH  )                                                                         \ execute code routine N (1-?)          CODE RUNCODE ( N -- )                     XSAVE STX, BOT LDA,                     ' <RUNCODE> JSR,                        XSAVE LDX, POP JMP, C;                                                        DECIMAL                                                                                                                                                                                                                                                                  STX,        \ 4 3      \ find start for routine N                .A ASL, TAY,               \ 2 2        N )Y LDA, >PRO STA, INY,   \ 5 3 2      N )Y LDA, >PRO 1+ STA,     \ 5 3        runcode JMP, C;            \ 32-168                                                                                                   \ jump is vectored to point to the      \ routine to execute by runcode         SUBR runrout \ [181-117]  \ 3             0 JMP,                  \ 178-117     S;                              ( RUNCODE                <10/22/86>147) HEX                                     \ execute routine number in A           CODE <RUNCODE> \ [74-168]    \ 6        \ copy pointer to code start to zp        FFE8 LDX, N STX,           \ 4 3        FFE9 LDX, N 1+( TABLE                  <10/16/86>145)                                         \ PALIGN                                                                        CREATE EXTBL \ room for 70 routines      80 ALLOT                                               ,                    \  3>        RTS, S;                    \ <3 6>                                                                                                                   ( FAH  )                                                                                                                                                                                                                                                                                                                                 4       \M music JSR,                \  --         runrout JSR,              \  181-117    >PRO INC, 0= NOT          \  5          IF, 0 CMP,                \  <2 3 3>    ELSE, >PRO 1+ INC, THEN,  \  <3 5>   \M DELEND 4 - JSR,           \  20        REPEAT                                                                                                                                                                                                                                                                0= NOT       \ 4          WHILE,                     \ <2          .A ASL, TAY,              \  2 2        EXTBL ,Y LDA,             \  4          runrout 1+ STA,           \  4          EXTBL 1+ ,Y LDA,          \  4          runrout 2+ STA,           \                                                                                                                                                                                                                                                                  ( runcode                <10/22/86>146)                                         \ run code pointed by >PRO              \ until 0 is found                      SUBR runcode \ [32-168]      \ 6          BEGIN, 0 # LDY,            \ 2           >PRO )Y LDA,                                                                                                                                                                                        ( FAH  )                                                                 ( 2RUNCODE               <10/22/86>148) HEX                                     \ execute routine number in A           \ which is loaded into bank 2           \ note this routine does not have       \      to be timed out as it is only    \      used to hEMBLER ?CSP ;                                                           : RELOAD ( N -- )                         ?NUM 1 RELOAD? ! LOAD ;                                              ( FAH  )                                                                  2 4 2    DEY, N )Y LDA,               \ 2 4      RTS,                         \ 6      S;                                      DECIMAL                                                                                                                                    DP !                                   ELSE HERE SWAP !                        THEN                                    ASSEMBLER [COMPILE] ASSEMBLER           MEM !CSP ;                                                                    : R; ASSX, uses n,n+1                                                   HEX SUBR getptr \ [44]         \ 6        0FFE2 ,Y LDX, N STX, INY,    \ 4 3 2    0FFE2 ,Y LDX, N 1+ STX,      \ 4 3      .A ASL, TAY,                 \ 2 2      INY, N )Y LDA, TAX,          \ \ if non-zero set DP   \ to point to previous value                                                    : ROUTINE: ( n -- ; n:1-?)                2* EXTBL + RELOAD? @                    IF @ DUP CONTEXT @ U< NOT                ABORT" CAN'T RELOAD"         ( USESFULL ROUTINES      <10/19/86>151)                                         \ enter with A set to item# to find     \ (1-?) and Y set to the list index     \ (0=graphics, 2=music, 4=text 6=code)  \ returns lo byte of item adress in A   \ and hibyte in ( ROUTINE:               <10/22/86>149)                                         \ compiles tables does not use heads    \ sets extbl entry N to point to        \ where code starts                                                             VARIABLE RELOAD?to the last byte of data          (don't change it if no data)            >PRO is inc'd by 1 by runcode           when the routine returns                                             ( FAH  )                                                                 o bank 1                           C083 LDX, C083 LDX,                     XSAVE LDX, POP JMP, C;               DECIMAL                                                                ( FAH  )                                                                 st use    117 clocks after the last music         Call, again counting the RTS          - All registers may be altered            alter zero page values with caution   - >PRO points to the opcode byte.         When the code returns >PRO must         point            DFE9 LDX, N 1+ STX,                  \ find start for routine N                 .A ASL, TAY,                            N )Y LDA, >PRO STA, INY,                N )Y LDA, >PRO 1+ STA,                  runcode JSR,                         \ back t                        They are called by runcode and must     meet the following conditions:                                                  - All routines are entered with 3         clocks used since the last music JSR,   NOT including the JSR, They muold basic menu setup    CODE 2RUNCODE ( N -- )                     XSAVE STX, BOT LDA,                  \ switch to bank 2                         C08B LDX, C08B LDX,                  \ copy pointer to code start to zp         DFE8 LDX, N STX,             ( ROUTINE NOTES          <10/17/86>150)                                         EXIT ---------- notes ------------ EXIT                                         The following routines are the          ones that acutually run the "program"                                                                                                                                                                                                          ( FAH  )                                                                 ( skipargs               <10/16/86>152)                                         \ adds A to >PRO (to skip data)         \ If entered with JMP can be used                                                                                       \ jmp time: 25 jrgs JMP,                \ 25    R;                                                                                                                                                     ( FAH  )                                                                 2 4        # 10 LDA, MDLP STA,        \ 2 4        >PRO INC, 0= NOT           \ 5          IF, 0 CMP,                 \ <2 3 3>    ELSE, >PRO 1+ INC, THEN,   \ <3 5>      0 CMP, NOP,                \ 3 2        RTS,                       \ 6               \ 2        getptr JSR,                  \ 44       GFIG STA, GFIG 1+ STX,       \ 3 3   \M DELEND 26 - JSR,             \ 646      drawfig JSR,                 \ 6-6   \M DELEND 36 - JSR,             \ 84       # 5 LDA,                     \ 2        skipa# 2 LDY,      \ 5 4        getptr JSR,                \ 44         >MUS STA, >MUS 1+ STX,     \ 3 3        # 1 LDA, MPER STA,         \ 2 3        MDUR STA,                  \ 3          # 3 LDA, MCNT STA,         \ 2 3        # 198 LDA, music STA,      \ FX STA,         \ 2 5 4    INY, >PRO )Y LDA, FX 1+ STA, \ 2 5 4    INY, >PRO )Y LDA, FY STA,    \ 2 5 4    INY, >PRO )Y LDA, FY 1+ STA, \ 2 5 4 \ get figure number                        INY, >PRO )Y LDA,            \ 2 5      # 0 LDY,                     ( 3: MUSIC               <10/20/86>155) \ args: N C,                            \ Set pointers to play tune n                                                   3 ROUTINE:   \ [114]          \ 6          # 1 LDY,                   \ 2          >PRO )Y LDA, ( 1: GRAPHIC             <10/20/86>153) \ args: X , Y , N C,                    \ draw graphic n at X Y                                                         1 ROUTINE:   \ [178-117]        \ 6        # 1 LDY,                     \ 2        >PRO )Y LDA, , DELEND 1- JSR,      \ 3 14       # 5 LDA,                   \ 2          skipargs JMP,              \ 25      R;                                                                     ( FAH  )                                                                                                                                                                                                                                                        ( FAH  )                                                                 3 3        # 0 LDY, 0ADR )Y LDA,      \ 2 4        # 1 LDY, TAX,              \ 2 2     \M 0 CMP, DELEND 21 - JSR,    \ 3 54    \M music JSR,                 \ --      \M DELEND 20 - JSR,           \ 52         gtype 2+ JSR,              \ 129-73  \M 0 CMP                                                                                                                                                                                                                                                                GX STA,         \ 2 5 4    INY, >PRO )Y LDA, GX 1+ STA, \ 2 5 4    INY, >PRO )Y LDA, GY STA,    \ 2 5 4    INY, >PRO )Y LDA, GY 1+ STA, \ 2 5 4    INY, >PRO )Y LDA, # 4 LDY, \ 2 5 2      getptr JSR,                \ 44         0ADR STA, 0ADR 1+ STX,     \ sr time: 28             SUBR skipargs               \ 6 or 3      CLC, >PRO ADC,            \ 2 3         >PRO STA, >PRO 1+ LDA,    \ 3 3         # 0 ADC, >PRO 1+ STA,     \ 2 3         RTS,                      \ 6         S;                              ( 2: MESSAGE             <10/20/86>154) \ args: X , Y , N C,                    \ print message n at X Y                                                        2 ROUTINE:   \ [178-117]      \ 6          # 1 LDY,                   \ 2          >PRO )Y LDA,                                                                                                                                                                                        ( FAH  )                                                                 ( 4-7: BAR's n BUB's     <10/16/86>156) \ args: X , Y , X , Y ,                 \ see scr 275 for notes                                                         4 ROUTINE: \ white bar                  5 ROUTINE: \ black bar                  6 ROUTINE: \ whi                                \ MORE...                                                                                                                                              ( FAH  )                                                                  \ 11      INY, >PRO )Y LDA, LY1 STA,    \ 11      INY,                          \ 2       INY, >PRO )Y LDA, hlinc STA,  \ 11      INY, >PRO )Y LDA, hrinc STA,  \ 11      # 0 LDY, >PRO )Y LDA,         \ 2 5  \ A has excode number                           3 2          bbar JSR,              \   171-53       0 CMP, THEN,           \   3>      \M  DELEND 8 - JSR,         \  28           # 8 LDA, skipargs JMP,  \  2 25         RTS,                    \  6>          THEN,                    \ <3>               ite left hook           11 ROUTINE: \ white rigth hook             # 1 LDY, \ [178-117]          \ 6 2          >PRO )Y LDA, LX1 STA,    \ 5 4     INY, >PRO )Y LDA, LX1 1+ STA, \ 11      INY, >PRO )Y LDA, LX2 STA,    \ 11      INY, >PRO )Y LDA, LX2 1+ STA,D 35 - JSR, \  3 82     \M  music JSR,              \  --       \M  0 CMP,                  \  3            # 4 CMP, 0=             \  2            IF, 0 CMP,              \  <2 3          wbar JSR,              \ 171-53 3>     ELSE, NOP,              \  <( 8-11: HOOKS            <10/19/86>159) \ args: X , X , Y , l , r ,             \ see scr 275 for notes                                                          8 ROUTINE: \ black left hook            9 ROUTINE: \ black right hook          10 ROUTINE: \ wh( 4-7: BAR's n BUB's cont<10/20/86>157)                                         \ [92]                                  \ now branch to the right routine          # 6 CMP, CS NOT ( < 6 ?) \ 2            IF,                      \ <2        \M  0 CMP, DELEN                                                                                                                                                                                       ( FAH  )                                                                                                 \ MORE...                                                                                                                                                                                                                       5                                               R;                                                                                                                                                                                                               \ 2 3     INY, >PRO )Y LDA, LX2 STA,    \ 11      INY, >PRO )Y LDA, LX2 1+ STA, \ 11      INY, >PRO )Y LDA, LY2 STA,    \ 11      INY, 0 CMP, 0 CMP,           \ 2 3 3    # 0 LDY, >PRO )Y LDA,         \ 2 5  \ A has excode number                                       \ <2 2 2        wbub JSR,               \  78-59 3>    ELSE, 0 CMP,             \ <3 3          bbub JSR,               \  78-59    \M  0 CMP, THEN,            \  3>       \M  DELEND 9 - JSR,         \  30          # 8 LDA, skipargs JMP,   \  2te bubble               7 ROUTINE: \ black bubble                  # 1 LDY, \ [178-117]          \ 6 2          >PRO )Y LDA, LX1 STA,    \ 5 4     INY, >PRO )Y LDA, LX1 1+ STA, \ 11      INY, >PRO )Y LDA, LY1 STA,    \ 11      INY, 0 CMP,                  ( 4-7: BAR's n BUB's cont<10/17/86>158)                                         \ [97]                                  \ now do the bubbles                    \ flags still valid from last CMP,       ( # 6 CMP, ) 0=            \              IF, NOP, NOP,                                \ MORE...                                                                                                                                              ( FAH  )                                                                 ( 8-11: HOOKS cont.      <10/17/86>160)                                         \ [92]                                  \ now branch to the right routine          # 10 CMP, CS NOT ( <10 ?) \ 2           IF,                     \ <2             # 8 CMP, 0=                                                                                                                                                                                        ( FAH  )                                                                                                                                                                                                                                                                                                                                         \M 0 CMP,                  \ 3          \M DELEND 29 - JSR,        \ 70            # 8 LDA,                \ 2             skipargs JMP,           \ 25                                                 R;                                              SR,         \ 144          copyv JSR,               \ 25-28     \M 0 CMP,                   \ 3         \M DELEND 34 - JSR,         \ 80           RTS,                     \ 6         R;                                                                                 \ <2 2 2         wlhook JSR,            \  78-14 3>     ELSE,                   \ <3         \M  0 CMP,                 \  3             wrhook JSR,            \  78-14     \M  0 CMP,                 \  3>           THEN,                        ( 13: COPYV              <10/20/86>163) \ ARGS: none                            \ Copy view page to alternate page      \ set draw page to alternate page       13 ROUTINE: \ [178-117]     \ 6         \M 0 CMP,                   \ 3         \M DELEND 66 - J( 8-11: HOOKS cont.      <10/21/86>161)                                         \ [97]                                  \ now do the bubbles                    \ flags still valid from last CMP,       ( # 10 CMP, ) 0=          \               IF, NOP, NOP,                                                                                                                                                                                       ( FAH  )                                                                                                                                                                                                                                                        ( FAH  )                                                                                                                                                                                                                                                                                                                                         \M   DELEND 29 - JSR,      \  70             # 8 LDA,              \  2              skipargs JMP,         \  25>          THEN,                   \ <3>                                                \ MORE...                                        27 - JSR,  \ 3 66         RTS,                     \ 6         R;                                                                                                                                                                                                         \  2             IF, 0 CMP,             \  <2 3           blhook JSR,           \   78-14 3>     ELSE, NOP,             \  <3 2           brhook JSR,           \   78-14         0 CMP, THEN,          \   3>       \M   0 CMP,                \  3 ( 12: VDINIT             <10/17/86>162) \ ARGS: none                            \ Set view draw page to page 1                                                  12 ROUTINE: \ [114]         \ 6            vdinit JSR,              \ 33        \M 0 CMP, DELEND                                                                                                                                                                                                                                                                ( 14: VDALT              <10/17/86>163) \ ARGS: none                            \ swap both view and draw pages                                                 14 ROUTINE: \ [114]         \ 6            valt JSR,                \ 38           dalt JSR,                                                                                                                                                                                           ( FAH  )                                                                            THEN,                                   TCLR STA,               \ 3          \M DELEND 36 - JSR,        \ 84            RTS,                    \ 6          R;                                                                                                                                                                                                                                                                                                                                                                 \ 2             \ get opcode number                     >PRO )Y LDA,            \ 4             # 17 CMP, 0=            \ 2             IF, # 0 LDA,            \ <2 2 3>       ELSE, # 127 LDA,        \ <3 2       \M   NOP,                  \  2>SR,         \ 64           RTS,                     \ 6         R;                                                                                                                                                                                              ( 17-18: TNORM, TINV     <10/17/86>167) \ ARGS: none                            \ Text is normal (white on black)                                               17 ROUTINE: \ TNORM \ [114]             18 ROUTINE: \ TINV         \ 6             # 0 LDY,     ( 15: VDPAGE             <10/17/86>165) \ ARGS: none                            \ Set view page to current draw page                                            15 ROUTINE: \ [114]         \ 6            vdpage JSR,              \ 38        \M DELEND 26 - J                                                                                                                                                                                       ( FAH  )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 SR,         \ 68           RTS,                     \ 6         R;                                                                                                                                                                                                          \ 34        \M DELEND 6 - JSR,          \ 30           RTS,                     \ 6         R;                                                                                                                                                      ( 16: DVPAGE             <10/17/86>166) \ ARGS: none                            \ Set draw page to current view page                                            16 ROUTINE: \ [114]         \ 6            dvpage JSR,              \ 34        \M DELEND 28 - J                                                                                                                                                                                       ( FAH  )                                                                 ( 19: WAIT               <10/20/86>168) \ args: n ,                             \ wait n mucyls (200clks each)          \ 5100 is approx 1 SEC                                                          SUBR wait \ [152-40]        \ 6           BEGIN,                                                                                                                                                                                               ( FAH  )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \ 3         \M DELEND 28 - JSR,         \ 68           RTS,                     \ 6         R;                                                                                                                                                                              20 ROUTINE: \ [178-117]    \ 6             cls JMP,                             R;                                                                                                                                                      ( 22: DALT               <10/17/86>171) \ ARGS: none                            \ swap view draw page                                                           22 ROUTINE: \ [114]         \ 6            dalt JSR,                \ 34        \M 0 CMP,       ( 20: CLEAR              <10/20/86>169) \ args: none                            \ clears current draw screen            \ ******************************        \ *** MUSIC CALLS NOT IN cls ***        \ ******************************                                                                                                                                                                                                               ( FAH  )                                                                 Y LDA, N 1+ STA,   \ 5 3          wait JSR,                \ 152-40       DELEND 19 - JSR,         \ 50           # 2 LDA, skipargs JMP,   \ 2 25       R;                                                                                                                                                                                                                                                                                                                                                                                CS NOT UNTIL,            \ 3/2          RTS, S;                  \ 6                                                  19 ROUTINE: \ [178-117]    \ 6            # 1 LDY,                 \ 2            >PRO )Y LDA, N STA, INY, \ 5 3 2        >PRO )            \ 3         \M DELEND 26 - JSR,         \ 64           RTS,                     \ 6         R;                                                                                                                                                                                 DELEND 67 - JSR,        \ 146           music JSR,              \ --            DELEND 1- JSR,          \ 14            SEC, N LDA, # 1 SBC,    \ 2 3 2         N STA, N 1+ LDA,        \ 3 3           # 0 SBC, N 1+ STA,      \ 2 3( 21: VALT               <10/17/86>170) \ ARGS: none                            \ swap view draw page                                                           21 ROUTINE: \ [114]         \ 6            valt JSR,                \ 38        \M 0 CMP,                                                                                                                                                                                              ( FAH  )                                                                 ( 23: SETWIN             <10/17/86>172) \ args: X , Y , X , Y ,                 \ Set draw window (X VALS IN BYTES)                                             23 ROUTINE: \ [114]                        # 1 LDY,                  \ 6 2         >PRO )Y LDA,                                                                                                                                                                                                                                                                  4 3        1LC 3 + LDA, >PRO 1+ STA, \  4 3>      THEN,                                \M 0 CMP, DELEND 24 - JSR,    \ 3 60       RTS,                       \ 6       R;                                                                                              R;                                                                                                                                                                                                                                                      1+ LDA,       \ 4 4        # 0 SBC, 1LC 1+ STA,       \ 2 4        CS NOT \ if borrow don't loop           IF,                        \ <2          DELEND JSR,               \  12 3>     ELSE,                      \ <3          1LC 2 + LDA, >PRO STA,    \ NY STA,      \ 2 3         #  40 LDA, MAXX STA,      \ 2 3         # 192 LDA, MAXY STA,      \ 2 3      \M DELEND 35 - JSR,          \ 82          RTS,                      \ 6                                                                                ( 26: 1LOOP              <10/19/86>175) \ args: N ,                             \ Dec loop count if non-zero jmp                                                26 ROUTINE: \ [114]           \ 6          1LC LDA, SEC, # 1 SBC,     \ 4 2 2      1LC STA, 1LC ( 24: FULLWIN            <10/17/86>173) \ args: none                            \ Set draw window to full screen                                                24 ROUTINE: \ [114]          \ 6           #   0 LDA, MINX STA,      \ 2 3         #   0 LDA, MI                                                                                                                                                                                       ( FAH  )                                                                                                                                                                                                                                                                                                                                 28         >PRO LDA, 1LC 2+ STA,      \ 4 4        >PRO 1+ LDA, 1LC 3 + STA,  \ 4 4     \M DELEND 11 - JSR,           \ 34         RTS,                       \ 6                                                                                                3      \M 0 CMP,                    \ 3        \M DELEND 10 - JSR,          \ 32          # 8 LDA,                  \ 2           skipargs JMP,             \ 25                                               R;                                                                      25 ROUTINE: \ [114]           \ 6          # 1 LDY,                   \ 2          >PRO )Y LDA, 1LC STA, INY, \ 5 4 2      >PRO )Y LDA, 1LC 1+ STA,   \ 5 4        # 2 LDA,                   \ 2          skipargs JSR,              \ MINX STA,    \ 5 3         INY, INY,                 \ 2 2         >PRO )Y LDA, MINY STA,    \ 5 3         INY, INY,                 \ 2 2         >PRO )Y LDA, MAXX STA,    \ 5 3         INY, INY,                 \ 2 2         >PRO )Y LDA, MAXY STA,    \ 5( 25: 1START             <10/20/86>174) \ args: N ,                             \ Set loop count for loop 1                                                     \ loop1 parameters cnt , adr ,          XVARIABLE 1LC 2 ALLOT                                                                                                                                                                                                                          ( FAH  )                                                                 ( 27: DGRAPHIC           <10/22/86>176) \ args: X , Y , N C,                    \ draw graphic n loaded in bank 2       HEX                                     1B ROUTINE:  \ [178-117]        \ 6        # 1 LDY,                     \ 2        >PRO )Y LDA, D 20 - JSR,             \ 84       C083 LDA, C083 LDA,          \ 4 4      # 5 LDA, skipargs JMP,       \ 2 25  R;                                      DECIMAL                                                                                                 25                                                                                                                                                                                                                                                              \ 2 2      DFE2 LDA, N STA,             \ 4 3      DFE3 LDA, N 1+ STA,          \ 4 3      N )Y LDA, GFIG STA, INY,     \ 5 3 2    N )Y LDA, GFIG 1+ STA,       \ 5 3   \M 0 CMP, DELEND 1B - JSR,      \ 3 66     drawfig JSR,                 \ 6-6   \M DELEN              \ 5          CLC, FX ADC, FX STA,       \ 2 4 4      FX 1+ LDA, # 0 ADC,        \ 4 2        FX 1+ STA,                 \ 4       \M DELEND 21 - JSR,           \ 54         # 1 LDA,                   \ 2          skipargs JMP,              \ FX STA,         \ 2 5 4    INY, >PRO )Y LDA, FX 1+ STA, \ 2 5 4    INY, >PRO )Y LDA, FY STA,    \ 2 5 4    INY, >PRO )Y LDA, FY 1+ STA, \ 2 5 4    INY, >PRO )Y LDA,            \ 2 5      C08B LDX, C08B LDX,          \ 4 4      .A ASL, TAY,                 ( 30: ADDFX              <10/23/86>179) \ args: N C,                            \ add N to FX                                                                   30 ROUTINE:   \ [114]         \ 6          # 1 LDY,                   \ 2          >PRO )Y LDA, ( 28: 2GRAPHIC           <10/22/86>177) \ args: X , Y , N C,                    \ switch to bank 2, draw, switch back   HEX                                     1C ROUTINE: \ [178-117]         \ 6        # 1 LDY,                     \ 2        >PRO )Y LDA,                                                                                                                                                                                                                                                                 D 24 - JSR,             \ 84       # 5 LDA,                     \ 2        skipargs JMP,                \ 25    R;                                      DECIMAL                        ( FAH  )                                                                 \ 6-6   \M DELEND 36 - JSR,             \ 84       # 1 LDA,                     \ 2        skipargs JMP,                \ 25    R;                                                                                                                              \ 2 2      DFE2 LDA, N STA,             \ 4 3      DFE3 LDA, N 1+ STA,          \ 4 3      N )Y LDA, GFIG STA, INY,     \ 5 3 2    N )Y LDA, GFIG 1+ STA,       \ 5 3   \M 0 CMP, DELEND 1F - JSR,      \ 3 74     drawfig JSR,                 \ 6-6   \M DELENber                        >PRO )Y LDA,                 \ 5        # 0 LDY,                     \ 2        getptr JSR,                  \ 44       GFIG STA, GFIG 1+ STX,       \ 3 3   \M 0 CMP, DELEND 46 - JSR,      \ 3 104    drawfig JSR,                 FX STA,         \ 2 5 4    INY, >PRO )Y LDA, FX 1+ STA, \ 2 5 4    INY, >PRO )Y LDA, FY STA,    \ 2 5 4    INY, >PRO )Y LDA, FY 1+ STA, \ 2 5 4 \ get figure number                        INY, >PRO )Y LDA,            \ 2 5      .A ASL, TAY,                 ( 29: REDRAW             <10/23/86>178) \ args: N C,       ,                    \ draw graphic at FX,FY                                                         29 ROUTINE:   \ [178-117]       \ 6        # 1 LDY,                     \ 2     \ get figure num                                                                                                                                                                                       ( FAH  )                                                                 ( MACRO FOR SCR 181      <10/24/86>180)                                         APPENDIX                                                                        GET-A&E                                 : GBASE)Y-STA,'S \ ( N -- )               GET-A&E ASSEMB                                                                                                                                                                                       ( FAH  )                                                                            # 185 LDA, N STA,        \ 2 3          # 178 LDX,               \ 2            clrelf JSR,              \ 162-30    \M 0 CMP, DELEND 33 - JSR,  \ 3 78         RTS,                     \ 6                                                 R;       --     \M  0 CMP, 0 CMP, NOP, NOP,    \ 10         INX, # 150 CPX, 0=         \ 2 2       UNTIL,                      \ 3/2    \M 0 CMP, DELEND 40 - JSR,     \ 3 92      RTS,                        \ 6                                              R;      STA,        \ 2 3          # 123 LDX,               \ 2         \M 0 CMP,                   \ 3            clrelf JSR,              \ 162-30    \M 0 CMP, DELEND 68 - JSR,  \ 3 148     \M music JSR,               \ --        \M DELEND JSR,              \ 12start y value  \ 2         BEGIN,                                   yaddr JSR,                 \ 42         # 128 LDA, \ value to store \ 2         # 12 LDY, \ start x val    \ 2          15 GBASE)Y-STA,'S          \ 118    \M  music JSR,                 \( 32: CLRELF             <10/25/86>182) \ args: none                            \ erase 126,141-280,141 and             \ 126,178-280,185 real fast                                                     32 ROUTINE:   \ [178-117]   \ 6            # 141 LDA, N ( 31: CLRBEAR            <10/24/86>181) \ args: none                            \ erase 84,45 to 189, 150 real fast                                             31 ROUTINE:   \ [178-117]      \ 6         NOP, NOP, NOP,              \ 2 2 2     # 45 LDX,  \                                                                                                                                                                                                                                                                 ll take a grand total of        n*8-2 clocks                                                                                                                                                                                                                     3 12   \M  music JSR,                 \ --     \M  DELEND 1- JSR, 0 CMP,      \ 3 14       INX, N CPX, 0=             \ 2 3       UNTIL,                      \ 3/2       RTS,                        \ 6      S;                                                                                              EXIT -----                                                                      Above will compile the phrase           GBASE )Y STA, INY, n-1 times            followed by GBASE )Y STA,               which wi62-30]         \ 6         BEGIN, yaddr JSR,           \ 42         # 128 LDA, # 18 LDY,       \ 2 2    \M  DELEND 49 - JSR,           \ 110    \M  music JSR,                 \ --         21 GBASE)Y-STA,'S          \ 166    \M  0 CMP, DELEND JSR,         \LER                       1- 0                                    DO GBASE )Y STA, INY,                   LOOP                                    GBASE )Y STA, ;                                                               MAIN                            ( 32: CLRELF             <10/25/86>182)                                                                                 \ clear from byte 18 to end of line     \ starting at X ending with N                                                   SUBR clrelfreplaced instruction       CURFLIP DEC, 0=                         IF, CURFLIP 1+ STA,                      FLIPRATE LDA, CURFLIP STA,           \ code of valt                             VPAGE LDA, 0=                                                                                                                                                                                                                                                                                ( readfile               <10/21/86>191)                                         HEX                                     \ patched into forth RWTS interface     \ word <DOSRWTS> at B65E                                                        SUBR readfileif non-zero flip between pages        \ every FLIPRATE sectors                VARIABLE FLIPRATE                                                                                                                                                                                                                                                                                                                       ( RWSEC# READFILE        <10/20/86>190)                                         \ sectors are number 0-559              \ start sec#=blk#/4                                                             : RWSEC# ( ADR SEC# R/W N -- )            >R >R >R 6 0  ;                                                                       DECIMAL                                                                                                        ( FAH  )                                                                 ( READFILE               <10/28/86>192) HEX                                     VARIABLE FR/W 1 FR/W !                                                          : READFILE ( ADR SEC# N -- )              FLIPRATE @ ?DUP                         IF CURFLIP !  OP                                 1 FR/W ! ;                           DECIMAL                                                                                                                                                                                 s          DFE8 ADJPTRS \ code                     DFE6 ADJPTRS \ text                     DFE4 ADJPTRS \ music                    DFE2 ADJPTRS \ graphics                 R2-W2                                   1 FR/W !                             ; DECIMA2?         IF                                       B6 R@ 5 + C@ - 100 * \ source adr       DUP                                     R@ 3 + @             \ sec #, read      R@ 5 + C@ READFILE   \ #secs           ELSE B600 THEN                          R> DR\ dir table entery         PAD 0C 1 1 RWSEC# \ get directory       R@ 2+ C@ 10 >                           ABORT" 2@FILE: too large!"              E0 R@ 2+ C@ - 100 *    \ source adr     R@ @                   \ sec #          R> 2+ C@ READFILE      \ #secDR )                       6 * PAD + >R \ dir table entery         PAD 0C 1 1 RWSEC# \ get directory       100 R@ 2+ C@ - 100 *  \ source adr      R@ @                  \ sec #, read     R@ 2+ C@ READFILE     \ #secs           R@ 3 + @              \ part ( 2@FILE                 <10/28/86>195)                                         HEX \ **** DOES NOT SWAP BSM ****       : 2@FILE ( N -- )                          R1-W1 2 BSM !                        \  2 BSM! will cause RESET to R2-W2        6 * PAD + >R ( @FILE                  <10/21/86>193)                                         \ reads file N into memory (0-40)       \ return lowest address used in         \ lower memory                          HEX \ **** DOES NOT SWAP BSM ****       : @FILE ( N -- AOP ;                                                                                                                                                                                   ( FAH  )                                                                                                                                                                                                                                                        ( FAH  )                                                                         \ now lets fix all the subpointers        DUP OFFPTR DUP @ >R                     2+ \ point to first entry               BEGIN DUP OFFPTR                          DUP 2+ SWAP @ R@ =                    UNTIL                                   R> DDR          THEN ;                                                                        DECIMAL                                                                                                                                                                  at adr                 : OFFPTR ( ADR -- )                       DUP @ 8192 - SWAP ! ;                                                         : ADJPTRS ( ADR -- )                    \ adjust the pointer                      DUP OFFPTR @                                             20 B6C7 C! S' readfile B6C8 !           FR/W @ SWAP RWSEC#                      CE B6C7 C! B7F1 B6C8 !                 ELSE \ make sure patch removed           CE B6C7 C! B7F1 B6C8 !                  FR/W @  SWAP RWSEC#          ( ADJPTRS                <10/22/86>194) \ given the load address of             \ a pointer adjust a subpointers        \ to be correct for the new location    \ in bank 2                                                                     \ adjust pointergetyn                  <10/26/86>200)                                         XVARIABLE YNFR 500 YNFR !               \ every YNFR music cycles call valt     \ so that music animation will continue                                         VARIABLE SEED   , SEED 1+ INC, THEN, \ <3 5>    \M  0 CMP, DELEND 33 - JSR,  \ 3 78         49152 LDA, 0< \ key?     \ 4           UNTIL,                    \ 3/2      \ MORE...                                                                                                         WHILE GX @ DUP LX1 ! 6 + LX2 !           GY @ DUP LY1 ! 8 + LY2 !                S' TCLR C@ 0=                           IF S' wbar CALL CURDEL                   S' bbar CALL CURDEL                    ELSE S' bbar CALL CURDEL                 S' w 12         YNFR LDA, N STA,         \ 4 3          YNFR 1+ LDA, N 1+ STA,   \ 4 3          wait JSR,                \ 152-40       valt JSR,                \ 38           SEED INC, 0=             \ 5            IF, 0 CMP,               \ <2 3 3>      ELSE                                                                X: CURDEL                                 800 0 DO QTERM IF LEAVE THEN LOOP X;                                          : CURSOR                                  BEGIN QTERM NOT               STA,         \ 4 3          YNFR 1+ LDA, N 1+ STA,   \ 4 3          wait JSR,                \ 152-40       valt JSR,                \ 38       \M  0 CMP, DELEND 44 - JSR,  \ 3 100    \M  music JSR,               \ --       \M  0 CMP, DELEND JSR,       \ 3( GINPUT prims           <10/26/86>203)                                           0 CONSTANT ESC? \ 1= ESC in GINPUT        XVARIABLE MAXCNT                      0 XCONSTANT INADR                     260 CONSTANT GIRM \ right margin                        ( getyn                  <10/26/86>201) SUBR getyn  \ [8-17]         \ 6          BEGIN, BEGIN, NOP,         \ 2        \M  music JSR,               \ --       \M  0 CMP, 0 CMP, 0 CMP, NOP, \ 11          49168 LDA, \ clear kb    \ 4            YNFR LDA, N                                                                                                                                                                                        ( FAH  )                                                                                                                                                                                                                                                                                                                                 <2          RTS,                      \  6>        THEN,                      \ <3>     \M DELEND 77 - JSR,           \ 166       AGAIN,                      \ 3                                               S;                                                      looking for Y or N, while swapping      view pages to provide animation                                                 returns A=Upper case version of the     character pressed                                                                                     \ 2          IF,                        \ <2          0 CMP, NOP,               \  3 2        RTS,                      \  6>        THEN,                      \ <3>        # 89 CMP, 0=               \ 2          IF,                        \                         \ inc'd while waiting for response                                                                                      EXIT --------- notes ---------- EXIT                                            clear keyboard strobe then start( getyn cont...          <10/26/86>202)                                                                                    0 CMP,                     \ 3       \M music JSR,                 \ --         # 95 AND,                  \ 2          # 78 CMP, 0= bar CALL CURDEL THEN              REPEAT ;                                                                                                                                             ( FAH  )                                                                 ( GINPUT prims           <10/28/86>204)                                         X: ^CHAR ( -- ADR )                       INADR DUP C@ + 1+ X;                                                          X: DELCHAR ( -- )                         INADR C@ \ if JSR,                              XSAVE LDX, POP JMP,                   C;                                                                                                             ( FAH  )                                                                         : TOUC ( C -- )                           DUP ASCII a - 26 U<                     IF 32 - THEN ;                                                                : UC=                                     TOUC SWAP TOUC = ;                                                                            X: OFFRT? ( -- T/F; t=past right mar)      GX @ GIRM < NOT X;                                                           CODE GEMIT ( C -- )                       XSAVE STX, BOT LDA,                     gemit                                                                 : RANDOM ( N -- I; 0<=i<n )                SEED @ U* SWAP DROP                     SEED @ 27517 U*                         2311 0 D+ DROP SEED ! ;                                                                                                              X: !CHAR ( C -- )                          ^CHAR C! 1 INADR +C! X;                                                      X: NOROOM? ( -- T/F; t=str full)           INADR C@ MAXCNT @ < NOT X;   ( RANDOM TOUC UC=        <10/26/86>207)                                         \ seed is defined earlier so that       \ it may be incremented by getyn        \ while waiting for a response to       \ give a better looking random                          ( GINPUT prims           <10/28/86>205)                                         X: VALKEY? ( C -- T/F; t=val char )        DUP 31 > OVER 127 < AND                 IF 2* ASCTAB + @ 0= NOT                 ELSE DROP 0 THEN                     X;                                              ;                                                                                                                                                      ( FAH  )                                                                                                                                                                                                                                                        ( FAH  )                                                                            ELSE R@ VALKEY? NOT                      NOROOM? OR OFFRT? OR NOT                IF R@ !CHAR R@ GEMIT THEN              THEN                                    R> 13 =                                UNTIL                                   1                S' TCLR C@ 0=                           IF S' bbar CALL                         ELSE S' wbar CALL THEN                 THEN X;                                                                                                                       NADR !                    0 INADR C! ?TERMINAL DROP               BEGIN CURSOR KEY >R                      R@ 27 = ESC? AND                        IF R> DROP 0 EXIT THEN                  R@ 8 = R@ 127 = OR                      IF DELCHAR                   there are chars           IF -1 INADR +C!                          GX @ LX2 ! GY @ 10 + LY2 !              ^CHAR C@ 2* ASCTAB + @                  270 + ASCTAB + C@ DX + ( width )        NEGATE GX +!                            GX @ LX1 ! GY @ LY1 !        ( GINPUT                 <10/28/86>206)                                         \ input string of max chars to adr      \ return if esc pressed, false if       \ esc pressed                           : GINPUT ( adr max -- T/F)                MAXCNT C! X' I                                                                                                                                                                                       ( FAH  )                                                                 ( ^MESS# GTYPE           <10/26/86>208)                                         \ return the address of message         \ number n, ( 1<=n<? )                                                          CODE ^MESS# ( N -- ADR )                  XSAVE STX,                                                                                                                                                                                                                                                                                                                    : CLOSING                                 0 S' TCLR C!                            0 @FILE 2 RUNCODE                       <CLOSING> ASCII N =                     IF 15 1012 +C!                           BEGIN                                                                                                                                                                                                                                                                                                                                CODE <CLEND>                              XSAVE STX, # 0 LDA, N STA,              # 20 LDA, N 1+ STA,                     wait JSR, valt JSR,                     XSAVE LDX, NEXT JMP, C;                                                                                                                                                                                                                                                                       ( CLOSING                <10/28/86>211)                                         XCODE <CLOSING> ( -- Y/N )                 XSAVE STX, getyn JSR,                   XSAVE LDX, DEX, DEX, BOT STA,           # 0 LDA, BOT 1+ STA,                    NEXT JMP, XC;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 JMP,                           C;                                                                                                                                                     ( FAH  )                                                                                                                                                                                                                                                                                                                                         CODE GTYPE ( ADR CNT -- )                 SEC LDA, 0ADR STA,                      SEC 1+ LDA, 0ADR 1+ STA,                BOT LDA, XSAVE STX,                     TAX, gtype JSR,                         XSAVE LDX,                              POPTWOne 1                      0 @FILE 1 RUNCODE                     \ do opening scene 2                      7 FLIPRATE ! 1 @FILE 1 RUNCODE        \ do opening scene 3                      2 @FILE 1 RUNCODE                     X;                                                        BOT LDA, # 4 LDY,                       getptr JSR, N STX,                      XSAVE LDX, BOT STA,                     N LDA, BOT 1+ STA,                      NEXT JMP, C;                                                          ( OPENING                <10/28/86>210)                                         X: OPENING                                S' vdinit CALL S' cls CALL HG         \ load menu basic                         0 FLIPRATE ! 3 2@FILE                 \ do opening sce <CLEND> AGAIN                    THEN                                  ;                                                                                                              ( FAH  )                                                                 ( MENU                   <10/26/86>212)                                         VARIABLE ROUT#                          \ must be set to 2 by the starting      \ code, on exit, it is the routine      \ number that was selected (3-6)        \ 8 means go to , DELEND 35 - JSR,   \ 3 82        # 9 LDA, ' <RUNCODE> JSR, \ 2 74-168                                                                                                                ( FAH  )                                                                 -- EXIT                                         The bears scenes are set as follows                                             1   : Draw frame, branches, on invis    2   : Ask for your message              3-10: Dance steps 1-8                   11  : Do 102    \ display prompt                           # 2 LDA, ' <RUNCODE> JSR, \ 2 74-168 \ get response                             0 CMP, NOP,               \ 3 2         getyn JSR, PHA,           \ 8-17 3   \ erase prompt                             0 CMP                          " Happy Holidays!"                    CREATE YOURORIG 81 ALLOT                XCREATE MESS 81 ALLOT                   XVARIABLE DLEN                                                                  EXIT --------- notes -----------y present, ask             ROUT# LDA,                \ 4           ' <RUNCODE> JSR,          \ 74-168      0 CMP, 0 CMP, 0 CMP,      \ 3 3 3       NOP, NOP,                 \ 2 2         music JSR,                \ --          0 CMP, DELEND 45 - JSR,   \ 3( BEARS                  <10/28/86>215) APPENDIX                                : "                                       34 WORD C@ 1+ ALLOT ;                 MAIN                                                                            XCREATE ORIGMESS( <MENU>                 <10/26/86>213)                                         XCODE <MENU>                              XSAVE STX, \ ROUT# INC, next present  \ display scene, start music, bend        # 1 LDA, ' <RUNCODE> JSR,              BEGIN, \ displa JSR,                \ --          DELEND 44 - JSR,          \ 100        AGAIN,                     \ 3        XC;                                                                    ( FAH  )                                                                 or card maker                   8 like 1 but no music                   9 erases Y/N box                        10 draw scene for card                                                 ( FAH  )                                                                             XSAVE LDX, NEXT JMP, THEN, \ <3>    \ go down for anther present               DELEND 39 - JSR,          \ 90          # 8 LDA, ' <RUNCODE> JSR, \ 2 74-168    0 CMP, 0 CMP, 0 CMP,      \ 3 3 3       NOP, NOP,                 \ 2 2         music        1 sets up scene, bends                  2 prints Y/N box                        3 shakes/asks for bears                 4 shakes/asks for parade                5 shakes/asks for ball                  6 shakes/asks for elves                 7 asks fEXT JMP, THEN, \ <3>       NOP, NOP, music JSR,      \ 2 2 --   \ inc and check if at end                  ROUT# INC,                \ 6           ROUT# LDA, # 7 CMP, 0=    \ 4 2         IF, \ kill music, and return              # 96 LDA, music STA,       closing                                                         EXIT ----------------------------- EXIT                                         the following code routines are         defined in the menu file:                                               ( <MENU> cont            <10/28/86>214) \ [168]                                 \ now lets look at answer                  PLA, # 89 CMP, 0=         \ 4 2         IF, \ kill music, and return             # 96 LDA, music STA,                    XSAVE LDX, Nuble spin (space)               12  : bow                                                                                                                                              ( FAH  )                                                                 ( bearstep               <10/26/86>216)                                         \ given char in accum, return routine   \ number to run in accum                                                        SUBR bearstep                           \ space's alwaysADR 1+ INC, THEN,                  DLEN DEC, 0=                           UNTIL,                                  XSAVE LDX, NEXT JMP,                  XC;                            ( FAH  )                                                                           UNTIL X;                                                                      X: BEARS                                  ORIGMESS <BEARS> X;                                                           : BEAROPEN                                YOUROR           PLA, PHA, gemit JSR, dalt JSR,          PLA, bearstep JSR,                      ' <RUNCODE> JSR,                     \ make sure music is dead                  # 96 LDA, music STA,                    0ADR INC, 0=                            IF, 0                           BEARDANCE                               1 RUNCODE \ draw frame                  2 RUNCODE \ ask for your message        15 GX ! 170 GY !                        1 ' ESC? ! 0 S' TCLR C!                 MESS 80 GINPUT 0= ( ESC )    ,                          0ADR )Y LDA, ( char )                   PHA, GX LDA, SX STA,                    GX 1+ LDA, SX 1+ STA,                   PLA, PHA, gemit JSR,                    dalt JSR, SX LDA, GX STA,               SX 1+ LDA, GX 1+ STA,        ( BEARS BEAROPEN         <10/28/86>219)                                         X: <BEARS> ( ADR -- )                     DUP C@ 1+ MESS SWAP CMOVE               6 @FILE                                 1 RUNCODE \ draw frame                  BEGIN         ( <BEARDANCE>            <10/28/86>217) XVARIABLE SX                            \ run dlen steps from 0ADR              \ with special logic for BL and end     XCODE <BEARDANCE>                         XSAVE STX,                              BEGIN, # 0 LDYDANCE>                            THEN                                  X;                                                                                                             ( FAH  )                                                                                                   \ not last, char                        # 7 AND, CLC, # 3 ADC, RTS,           S;                                                                                                                                                         168 LY1 ! 179 LY2 !                     S' bbar CALL                            S' valt CALL S' copyv CALL              0 S' TCLR C!                            140 MESS COUNT STRLEN 2/ -              GX ! 168 GY !                           <BEAR            IF, # 63 CMP, ( ? ) 0= NOT               IF, \ if not . ! or ?                    \ just return based on char             # 7 AND, CLC, # 3 ADC, RTS,          THEN, THEN, THEN,                       # 12 LDA, RTS, ( bow step )            THEN,                                                                 X: BEARDANCE ( ADR -- )                   MESS C@ ?DUP                            IF DLEN !                                MESS 1+ S' 0ADR !                        15 LX1 ! 270 LX2 !           get rout 11              # 32 CMP, 0= ( space?)                  IF, # 11 LDA, RTS, THEN,              \ now check for bow (last char .?!)       DLEN LDX, # 1 CPX, 0=                   IF, # 46 CMP, ( . ) 0= NOT               IF, # 33 CMP, ( ! ) 0= NOT   ( BEARDANCE              <10/28/86>218) XVARIABLE SLEN                          X: STRLEN ( ADR CNT -- LEN )              0 SLEN ! 0                              DO DUP C@ 2* ASCTAB + @ 270 +            ASCTAB + C@ DX + SLEN +! 1+ LOOP       DROP SLEN @ X;IG <BEARS> ;                                                                                                                                                                           ( FAH  )                                                                 ( PARADE                 <10/28/86>220)                                         XVARIABLE AN# ( anagram # )                                                     X: PARADE                                  5 @FILE 8 RANDOM 1+ AN# !               1 RUNCODE \ d                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                X: ELVES                                   7 @FILE 1 RUNCODE                       0 FLIPRATE !                            8 @FILE 1 RUNCODE                    X;                                                                                                                                                                                                                                                                                              ( ELVES MAKER            <10/28/86>221)                                         \ vectored latter                       : MAKER                                   NOOP ;                                                                        EXIT                                                                                                                                                                                                                                                                             1 ( pressed ESC ) THEN            UNTIL                                   2 RUNCODE \ do the parade            X;                                                                     ( FAH  )                                                                                                                                                                                                                                                                                                                                             PAD 8 GINPUT \ answer input?            IF 1 AN# @ ^MESS#                        PAD C@ 1+ 0                             DO DUP I + C@ PAD I + C@ UC= NOT         IF SWAP NOT SWAP LEAVE THEN            LOOP DROP                              ELSE                                                                                                                                                                                                                                                                raw screen                 30 GX ! 57 GY !                         AN# @ 8 + ^MESS# COUNT GTYPE            BEGIN 110 LX1 ! 200 LX2 !                57 LY1 ! 68 LY2 ! S' wbar CALL          110 GX ! 1 ' ESC? !                     PAD 9 0 FILL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ( MENU                   <10/28/86>224)                                         : CASE: : DOES> SWAP 2* + @ EXECUTE ;                                           CASE: DOPRES                              BEARS PARADE PLAYBALL MAKER           ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               3 ROUT# !                          OPENING MENU CLOSING                   AGAIN                                 ;                                                                                                                                                                                                                                                                                                                                                                                                                          1 ROUT# +!                              ROUT# @ 6 > DUP NOT                     IF 1 2RUNCODE THEN                     UNTIL ;                                                                       : START                                   BEGIN                                                                                                                                                                                                                                                                                                                                 : MENU                                    BEGIN 7 FLIPRATE !                       4 @FILE <MENU>                          7 FLIPRATE !                            ROUT# @ 3 - DOPRES                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   X: DRBALL ( -- ; draw ball )               BX BY FN LFIG D! FN NOT X' FN !         BX BY 5 DRAWFIG X;                   X: ERBALL ( -- ; erase ball )              FN LFIG D@ 16 DRAWFIG X;                                                     X: THUMP                                                                                                                                                                                                                                                                ITERAL !                  FY ! FX !                               [ drawfig ] LITERAL CALL X; DECIMAL                                           XCREATE OP 8 ALLOT                      X: LFIG ( N -- ADR )                       0= NOT 4 * OP + X;                                                                                                                                                                                                                                                                           ( DRBALL ERBALL          <10/28/86>231) HEX                                     X: DRAWFIG  ( X Y N -- ; 1<=n<? )         OVER -40 <                              IF DROP DDROP EXIT THEN                 2* FFE2 @ \ graphics start              + @ [ GFIG ] L                                                                                                                                                                                                                                                                                                                                                                                                                                                       ( FAH  )                                                                                                                                                                                                                                                                                                                                           0 XCONSTANT DF?                                                                 0 XCONSTANT FN                                                                                                                                                                                                                                                                                                                                                                                                                        Y                                                                 0 XCONSTANT BDX \ ball speed            4 XCONSTANT BDY                                                                90 XCONSTANT DTOP \ dribble params     128 XCONSTANT DBOT                                                                                                                                                                                                                                                                              ( BBALL VARIABLES        <10/28/86>230)                                           0 XCONSTANT BX \ current ball pos       0 XCONSTANT BY                                                                    XVARIABLE LBX \ last ball pos           XVARIABLE LB 2 0                               DO 20 0 DO NOOP LOOP                     49200 C@ DROP                          LOOP X;                                                             ( FAH  )                                                                 ( DDRIB                  <10/28/86>232)                                         X: ?QTERM ( -- )                          QTERM 0= NOT DF? AND X;                                                       X: MBALL                                   ERBALL DRBALL                                                                                                                                                                                       ( FAH  )                                                                            360 MOD DUP 0< IF 360 + THEN            DUP 180 <                               IF ?MIRROR                              ELSE 180 - ?MIRROR NEGATE               THEN X;                              X: ISIN ( N -- SIN*10000 )                 REDUC          BEGIN QTERM NOT                         WHILE DDRIB UDRIB                       REPEAT X;                                                                                                                                                              */ #XS !                  10000 72 TRM 42 TRM 20 TRM 6 TRM        10000 */ X;                          X: ?MIRROR ( ? )                           DUP 90 >                                IF 180 SWAP - THEN X;                X: REDUCE ( ? )                 ! THEN                      MBALL                                  REPEAT                               X;                                                                              X: DRIBBLE                                1 X' DF? !                    ( DERIVED INT TRIG FUNCS <10/28/86>235) XVARIABLE #XS                           X: TRM ( ? )                               #XS @ SWAP / NEGATE                     10000 */ 10000 + X;                  X: {SIN} ( ? )                             DUP DUP 10000( UDRIB DRIBBLE          <10/28/86>233)                                         X: UDRIB ( -- ; dribble up )               BEGIN ?QTERM NOT BDY 0< AND             WHILE BDY X' BY +! BY DTOP <             IF BDY NEGATE X' BDY !                   DTOP X' BY                                                                                                                                                                                        ( FAH  )                                                                                                                                                                                                                                                        ( FAH  )                                                                            DUP 21 = ( right arrow? )               IF BX 4 + 160 MIN X' BX ! THEN          13 =                                   UNTIL                                   0 X' DF? ! DDRIB UDRIB                  MBALL MBALL                           X;                  IF BDY NEGATE X' BDY ! THUMP             DBOT X' BY ! THEN                      MBALL                                  REPEAT                               X;                                                                                      ( say posistion ball )    17 RN# !                                10 10 DDUP OP D! OP 4 + D!              12 X' BX ! DTOP X' BY ! 5 X' BDY !      BEGIN DRIBBLE KEY                        DUP 8 = ( left arrow? )                 IF BX 4 - 12 MAX X' BX ! THEN                           S' valt CALL S' dalt CALL X;                                                 X: DDRIB ( -- ; dribble down )             BEGIN ?QTERM NOT BDY 0> AND             WHILE BDY X' BY +!                       BY DBOT < NOT               ( POSISTION              <10/28/86>234)                                         XVARIABLE RN#                                                                   X: POSITION                               1 RUNCODE ( draw frame )                RN# @ RUNCODE E 17543 100 */ {SIN} X;         X: ICOS ( N -- COS*10000 )                 360 MOD 90 SWAP - ISIN X;                                                                                   ( FAH  )                                                                 ( GETNUM                 <10/28/86>236)                                          0 XCONSTANT GMIN                       99 XCONSTANT GMAX                          XVARIABLE GVAL                       X: GETNUM ( -- N )                        2 MAXCNT C! PA                                                                                                                                                                                       ( FAH  )                                                                            IF, XSAVE LDX, NEXT JMP, THEN,       \  check all bytes in between              BEGIN, lroff CPY, 0= NOT                WHILE, GBASE )Y LDA, INY,                # 127 AND, 0= NOT                       IF, XSAVE LDX, NEXT JMP, THEN,         REPEA                                                                                                                                                                                                                                                                                          XSAVE STX, lsetup JSR,                  # 1 LDA, X' HIT? STA, LY1 LDX,          BEGIN, yaddr JSR, lloff LDY,          \  check left remainde                     llimsk LDA, GBASE )Y AND, INY,          # 127 AND, 0= NOT            V                                                                                                                                                                                                                                                               ( <COL?>                 <10/26/86>239) 0 XCONSTANT HIT?                                                                \ check LX1,LY1 to LX2,LY2              \ if any non-zero bits, sets COL?                                               XCODE <COL?>    ( SHOT VARIABLES         <10/28/86>237)                                         0 XCONSTANT SANG                        0 XCONSTANT SPOW                        0 XCONSTANT RISE                        0 XCONSTANT SRUN                        -7 XCONSTANT GRA                                                                                                                                                                                       ( FAH  )                                                                 @ GMIN < NOT                       GVAL @ GMAX > NOT AND                   R> 13 = AND                            UNTIL                                   GVAL @ X;                    ( FAH  )                                                                           4 RUNCODE ( ask for speed )             1 X' GMIN ! 10 X' GMAX !                GETNUM 3 2 */ 1+ X' SPOW !            X;                                                                                                                               AND        IF R@ ASCII 0 - GVAL @ 10 * +            DUP GMAX > NOT                          IF GVAL ! R@ !CHAR R@ GEMIT             ELSE DROP THEN                         THEN                                   THEN                                    GVAL Y1 !                      270 LX2 ! 185 LY2 ! S' bbar CALL        S' valt CALL S' copyv CALL              3 RUNCODE ( ask for angle )             25 X' GMIN ! 80 X' GMAX !               GETNUM X' SANG !                        S' dalt CALL                  D X' INADR ! 0 GVAL !     0 INADR C! ?TERMINAL DROP               BEGIN CURSOR KEY >R                      R@ 8 = R@ 127 = OR                      IF INADR C@ DELCHAR                      IF GVAL @ 10 / GVAL ! THEN             ELSE R@ 48 - 10 U< NOROOM? 0=( SPARAMS                <10/28/86>238)                                         \ input shot parameters                                                         X: SPARAMS                                S' dvpage CALL S' dalt CALL             10 LX1 ! 160 LT,                                                                      \ MORE..                                                                                                       ( FAH  )                                                                 ( <COL?> cont..          <10/28/86>240)                                                                                 \  check right remainder                   lrimsk LDA, GBASE )Y AND,               # 127 AND, 0= NOT                       IF, XSAVE LDX                                                                                                                                                                                       ( FAH  )                                                                            S' valt CALL S' dalt CALL               GRAV X' RISE +!                        REPEAT                                  S' dalt CALL                            FN NOT X' FN ! ERBALL                   0 S' MINY C!                          X;                                                                                                                                                                                                                                                                       1000 */ X' SRUN !        4 S' MINY C!                            0 X' XERR ! 0 X' YERR !                 BEGIN ERBALL MOVEBALL                    COL? NOT                               WHILE                                    DRBALL                                                  HIT? X;                                                                                                                                                                                                                              ( DOSHOT                 <10/28/86>243)                                         X: DOSHOT                                 POSITION SPARAMS                      (  S' valt CALL ) S' copyv CALL           SPOW SANG ISIN 1000 */ X' RISE !        SPOW SANG ICOS( COL?                   <10/28/86>241)                                         X: COL? ( -- T/F; t=BX,BY will hit)        BX DUP LX1 ! 28 + LX2 !                 BY 4 MAX LY1 !                          BY 25 + 5 MAX LY2 !                     <COL?>       > RISE 0< AND BX 213 > AND         IF BNY BY 4 MIN X' BY ! THEN           THEN X;                               EXIT                                                                   ( FAH  )                                                                                                                                                                                                                                                        ( FAH  )                                                                           10 /MOD X' BY +! X' YERR !              BX 215 > BY 15 < AND COL? AND           IF BX 242 > SRUN 0> AND                  IF BNX BX 238 MIN X' BX ! THEN          BX 238 < SRUN 0> AND                    IF BNX BX 214 MIN X' BX ! THEN          BY 4           XSAVE LDX, NEXT JMP,                  XC;                                                                                                                                                                                                             */ NEGATE X' RISE !        YERR NEGATE X' YERR ! THUMP X;       X: MOVEBALL                               SRUN XERR + 10 /MOD DUP 1 AND           IF 1- SWAP 10 + SWAP THEN               X' BX +! X' XERR !                      RISE NEGATE YERR +            , NEXT JMP, THEN,       \  go the next line                        INX, LY2 CPX, 0=                       UNTIL,                                \ if we made it all the way here then   \ there is no collision                   # 0 LDA, X' HIT? STA,         ( MOVEBALL               <10/28/86>242) 0 XCONSTANT XERR                        0 XCONSTANT YERR                                                                X: BNX SRUN 2 3 */ NEGATE X' SRUN !        XERR NEGATE X' XERR ! THUMP X;       X: BNY RISE 3 4                                                                                                                                                                                        ( FAH  )                                                                 ( PLAYBALL               <10/28/86>244) : PLAYBALL                                7 @FILE 2 RN# ! S' dalt CALL            BEGIN DOSHOT                             BY 40 < RISE 0< AND \ made it ?         IF 6 RUNCODE ( good shottot mis)                 THEN THEN ?TERMINAL DROP                BEGIN CURSOR KEY TOUC                    DUP ASCII Y = OVER ASCII N = OR NOT    WHILE                                                                                                                                                                                                                                                                BY 39 > AND                 SRUN 0> AND                             IF 5 RUNCODE ( hit sockb                              12 NOTE G                                                                       MAIN                                                                                                                                                                                                                                                                                                                                                                             4 NOTE B                                5 NOTE C                                6 NOTE Db                               7 NOTE D                                8 NOTE Eb                               9 NOTE E                                                                                                                                                                                                                                                                                       ( NOTES                  <10/ 3/86>251)                                         APPENDIX                                                                         1 NOTE Ab                               2 NOTE A                                3 NOTE Bbset default conditions )      2 TO NMUL 0 TO NOFF 1 TO NDEL ;                                                                                                                                                                                                                                                                                                       : RNUM BL WORD NUMBER DROP ;            : NOTE                                    CREATE C,                               DOES> C@ RNUM RNUM                      >R 1- 12 * + NMUL * NOFF + C,           R> 3 * C,                                                                                                                                                                                                                                                                                     ( MUSIC COMPILER         <10/ 3/86>250)                                         APPENDIX                                2 CONSTANT NMUL                         0 CONSTANT NOFF                         1 CONSTANT NDEL                                                                                                                                                                                                                                ( FAH  )                                                                 ( PLAY MUSIC             <10/ 3/86>252)                                         APPENDIX                                                                        CODE playmusic C!        10 MDLP C! 1 MDUR C! play ;                                                    MAIN                                                                                                                                                                                                                                                                   80 - JSR,   \ 172          music JSR,               \ 19           musicbank 1    # D0 LDX,           \ starting page     BEGIN, ' copypage JSR,                   INX, # 00 CPX, 0= UNTIL,               XSAVE LDX, NEXT JMP, C;                                                       CODE COPY-ZP                              XSAVE                                                                                                                                                                                                                                                                                         HEX CODE COPY-BSM XSAVE STX,              C08B LDA, C08B LDA, \ r/w BSM bank 2    # D0 LDX,           \ starting page     BEGIN, ' copypage JSR,                   INX, # E0 CPX, 0= UNTIL,               C083 LDA, C083 LDA, \ r/w BSM                                                                                                                                                                                                                                                                 ( COPY-BSM               <10/25/86>271) EXIT                                    \ copy main BSM to auxillary            \ destroyes 240-241 (N,N+1)  in both    \ main and auxillary memory             \ leaves with main bank 1 BSM active                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( FAH  )                                                                                                                                                                                                                                                                                                                                 ain        C009 STA, F0 )Y STA, \ store aux        INY, 0=                                UNTIL,                                  C008 STA,           \ main ZP/STK/BSM   RTS, C;                               DECIMAL                                                                                                                                                                                                                                                                                                                                   F1 STX, F0 STA,     \ set aux zp ptr    C008 STA,           \ main ZP/STK/BSM   F1 STX, F0 STA,     \ set main zp ptr   # 0 LDY,            \ loop counter      BEGIN,                                   C008 STA, F0 )Y LDA, \ read m                                                                                                                                                                                                                                                                ( copypage               <10/25/86>270) EXIT                                    \ copy page X to aux bsm (D0-FF)        \ A,Y destroyed                         HEX CODE copypage                         C009 STA,           \ aux ZP/STK/BSM    0 # LDA,      STX,                              # 00 LDX, ' copypage JSR,               INX, ' copypage JSR,                    XSAVE LDX, NEXT JMP, C;               DECIMAL                                                                                                 ( swappage               <10/25/86>272)                                         \ swap page X between aux/main BSM      \ A,Y destroyed                         HEX CODE swappage                         C009 STA,           \ aux ZP/STK/BSM    0 # LDA,      MP,                             C; DECIMAL                                                                                                                                             ( FAH  )                                                                                                                                                                                                                                                                                                                                         \ copy bank 2 and remainder of BSM        C083 LDA, C083 LDA, \ r/w BSM bank 1    # D0 LDX,           \ starting page     BEGIN, ' swappage JSR,                   INX, # 00 CPX, 0= UNTIL,               XSAVE LDX,                              NEXT Jame routine.  When      it comes time to call the acutal        routine (which will, of course, vary    depending on which routine was called)  I can examine the opcode (>PRO ,Y LDA,  with Y=0) and branch to the proper      routine based on its value      M                         XSAVE STX,                            \ copy bank 1 BSM                         C08B LDA, C08B LDA, \ r/w BSM bank 2    # D0 LDX,           \ starting page     BEGIN, ' swappage JSR,                   INX, # E0 CPX, 0= UNTIL,     ( NOTES                  <10/16/86>275)                                         When there are many routines that       share the same setup procedures         (that is the same arguments that go     to the same variables) I set them up    to all use the s( SWAP-BSM               <10/25/86>273) \ SWAP main and auxillary BSM           \ destroyes 240-241 (N,N+1)  in both    \ main and auxillary memory             \ leaves with main bank 1 BSM active                                            HEX CODE SWAP-BS                                ' MYBRK CFA ' BRK-RETN !                                                                                                                                                                                                        TA,           \ main ZP/STK/BSM   F1 LDX,             \ restore X         RTS, C;                               DECIMAL                                                                ( FAH  )                                                                           BEGIN KEY DUP ASCII Y =                 OVER ASCII N = OR NOT                   WHILE DROP 7 EMIT REPEAT                ASCII Y =                               IF SWAP-BSM THEN                      ;                                               n          C009 STA, F0 )Y LDA, \ read aux         C008 STA, F0 )Y STA, \ store main       C009 STA, TXA,                          F0 )Y STA,         \ store aux          INY, 0=                                UNTIL,                                  C008 SR                         SWAP-BSM CFA EXECUTE                    SWAP-BSM E-B ;                                                                                                        : MYBRK                                   ." SWAP-BSM (Y/N)? "                                    F1 STX, F0 STA,     \ set aux zp ptr    C008 STA,           \ main ZP/STK/BSM   F1 STX, F0 STA,     \ set main zp ptr   # 0 LDY,            \ loop counter      BEGIN, C008 STA,                         F0 )Y LDA, TAX,    \ read mai( RUN MYBRK              <10/26/86>274)                                                                                                                         : RUN                                     96 S' music C!                          [COMPILE] ' HG                                                                                                                                                                                       ( FAH  )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (                        <10/26/86>279)                                                                                 : RU2                                     FORGET-SYS [COMPILE] ' CFA              SWAP-BSM EXECUTE                        SWAP-BSM                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( FAH  )                                                                 